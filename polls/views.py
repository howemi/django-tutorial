from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.template import loader
from django.utils import timezone
from django.views import generic
from django.urls import reverse
from django.db.models import F

from .models import Choice, Question

# Extra info
# {{{
# The ListView generic view uses a default template called <app name>/<model
# name>_list.html; we use template_name to tell ListView to use our existing
# "polls/index.html" template.
# }}}

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """
        Return the last five published questions (not including those
        set to be released in the future).
        """
        return Question.objects.filter(
                pub_date__lte=timezone.now()
               ).order_by('-pub_date')[:5]

# Extra Info
# {{{
# By default, the DetailView generic view uses a template called <app
# name>/<model name>_detail.html. In our case, it would use the template
# "polls/question_detail.html". The template_name attribute is used to tell
# Django to use a specific template name instead of the autogenerated default
# template name. We also specify the template_name for the results list view –
# this ensures that the results view and the detail view have a different
# appearance when rendered, even though they’re both a DetailView behind the
# scenes.
# }}}

class DetailView(generic.DetailView):
    model = Question
    template_name =  'polls/detail.html'
    def get_queryset(self):
        """
        Excludes any questions that aren't published yet.
        """
        return Question.objects.filter(pub_date__lte=timezone.now())

class ResultsView(generic.DetailView):
    model = Question
    template_name = 'polls/results.html'

# Below we have views that require more code than using generic views
#{{{

# Create your views here.
#def index(request):
#    latest_question_list = Question.objects.order_by('-pub_date')[:5]
#    context = {
#        'latest_question_list': latest_question_list,
#    }
#    # template = loader.get_template('polls/index.html')
#    # return HttpResponse(template.render(context, request))

#    #shortcut
#    return render(request, 'polls/index.html', context)


#def detail(request, question_id):
#    # shortcut
#    question = get_object_or_404(Question, pk=question_id)
#    # try:
#    #     question = Question.objects.get(pk=question_id)
#    # except Question.DoesNotExist:
#    #     raise Http404("Question does not exist")
#    # return HttpResponse(f'You\'re looking at question {question_id}')
#    return render(request, 'polls/detail.html', {'question': question})

#def results(request, question_id):
#    question = get_object_or_404(Question, pk=question_id)
#    return render(request, 'polls/results.html', {'question': question})

#}}}

def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice",
        })
    else:
        # selected_choice.votes += 1
        selected_choice.votes = F('votes') + 1
        selected_choice.save()
        # To access the new value uncomment this line:
        # selected_choice.refresh_from_db
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a user
        # hits the back button
    return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
